# -*- coding: utf-8 -*-
"""
Created on Wed Jun  5 17:28:32 2019

@author: Guilherme
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.neural_network import MLPRegressor

def gridMLP(X_train,Y_train,X_val,Y_val):      
                     
    """
    Melhores parametros encontrados do la√ßo for abaixo:
        
    ('relu', 'lbfgs', 0.00055)
    """
    
    activation = ['relu','tanh']
    solver = ['lbfgs']
    alpha = np.linspace(0.001, 0.1, 8)
    
    best_erro = 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999

    for act in activation:
        for slv in solver:
            for aph in alpha:
                mlp = MLPRegressor(activation = act, solver = slv, alpha = aph)
                mlp.fit(X_train, Y_train)
                
                predict = mlp.predict(X_val)
                erro = metrics.mean_squared_error(Y_val, predict)
                
                if erro < best_erro:
                    
                    best_erro = erro
                    best_model = mlp
                    best_param = (act, slv, aph)
                    best_predicts = predict
                    
                    print best_param
                    print best_erro
                    
    
    return (best_model, best_predicts, best_erro, best_param)
